variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  CurrentSemanticVersionBase: '99.0.0'
  PreviewNumber: $[counter(variables['CurrentSemanticVersionBase'], 1001)]
  CurrentSemanticVersion: '$(CurrentSemanticVersionBase)-preview$(PreviewNumber)'
  NugetPackageVersion: '$(CurrentSemanticVersion)'
  PathToSolution: 'AsyncAwaitBestPractices.sln'
  PathToSampleAppCsproj: 'sample/HackerNews.csproj'
  PathToUnitTestsCsproj: 'src/AsyncAwaitBestPractices.UnitTests/AsyncAwaitBestPractices.UnitTests.csproj'
  PathToAsyncAwaitBestPracticesCsproj: 'src/AsyncAwaitBestPractices/AsyncAwaitBestPractices.csproj'
  PathToAsyncAwaitBestPracticesMVVMCsproj: 'src/AsyncAwaitBestPractices.MVVM/AsyncAwaitBestPractices.MVVM.csproj'
  Xcode_Version: '15.1.0'

trigger:
  branches:
    include:
    - main
  tags:
    include:
    - '*'

pr:
  autoCancel: 'true'
  branches:
    include:
    - main

jobs:     
  - job: build_sample
    displayName: Build .NET MAUI Sample App
    strategy:
      matrix:
        'Windows':
          image: 'windows-latest'
        'macOS':
          image: 'macos-13'
    pool:
      vmImage: $(image)
    
    steps:
      - task: CmdLine@2
        displayName: 'Set Xcode v$(Xcode_Version)'
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS
        inputs:
          script: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(Xcode_Version).app;sudo xcode-select --switch /Applications/Xcode_$(Xcode_Version).app/Contents/Developer

      - task: UseDotNet@2
        displayName: 'Use .Net Core SDK  8.0.x'
        inputs:
          version: '8.0.x'
          packageType: 'sdk'

      - powershell: dotnet workload install maui --skip-sign-check --source https://api.nuget.org/v3/index.json
        displayName: Install Latest .NET MAUI Workload

      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'
        inputs:
          checkLatest: true

      - task: CmdLine@2
        displayName: 'Build Sample App'
        inputs:
          script: 'dotnet build $(PathToSampleAppCsproj)'

      - task: CopyFiles@2
        displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
        inputs:
          SourceFolder: '$(system.defaultworkingdirectory)'
          Contents: '**\bin\$(BuildConfiguration)\**'
          TargetFolder: '$(build.artifactstagingdirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'

  - job: build_test_library
    displayName: Build + Test Library
    strategy:
      matrix:
        'Windows':
          image: 'windows-latest'
        'macOS':
          image: 'macos-13'
    pool:
      vmImage: $(image)
    steps:
      # if this is a Release build, update the version number
      - powershell: |
          $buildSourceBranch = "$(Build.SourceBranch)"
          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf("/") + 1)
          Write-Host("Branch = $buildSourceBranch, Version = $tagVersion");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion")
        displayName: Set NuGet Version to Tag Number
        condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), not(endsWith(variables['Build.SourceBranch'], '-mediaelement'))) # Only run this step when a Tag has triggered the CI Pipeline

      # if this is a PR build, then update the version number
      - powershell: |
          $prNumber = $env:System_PullRequest_PullRequestNumber
          $commitId = "$($env:System_PullRequest_SourceCommitId)".Substring(0, 7)
          $fullVersionString = "$(CurrentSemanticVersionBase)-build-$prNumber.$(Build.BuildId)+$commitId"
          Write-Host("GitHub PR = $prNumber, Commit = $commitId");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$fullVersionString")
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersionMediaElement;]$fullVersionString")
          Write-Host "##vso[build.updatebuildnumber]$fullVersionString"
        displayName: Set NuGet Version to PR Version
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['build.reason'], 'PullRequest')) # Only run this step on Windows when a Pull Request has triggered the CI Pipeline

      - task: UseDotNet@2
        displayName: 'Use .Net Core SDK 2.1.x'
        inputs:
          version: ' 2.1.x'
          packageType: 'sdk'

      - task: UseDotNet@2
        displayName: 'Use .Net Core SDK 3.0.x'
        inputs:
          version: ' 3.0.x'
          packageType: 'sdk'

      - task: UseDotNet@2
        displayName: 'Use .Net Core SDK  6.0.x'
        inputs:
          version: ' 6.0.x'
          packageType: 'sdk'

      - task: UseDotNet@2
        displayName: 'Use .Net Core SDK  7.0.x'
        inputs:
          version: '7.0.x'
          packageType: 'sdk'

      - task: UseDotNet@2
        displayName: 'Use .Net Core SDK  8.0.x'
        inputs:
          version: '8.0.x'
          packageType: 'sdk'

      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'
        inputs:
          checkLatest: true

      - task: CmdLine@2
        displayName: 'Run UnitTests'
        inputs:
          script: 'dotnet test $(PathToUnitTestsCsproj) -c Release --settings ".runsettings" --collect "code coverage" --logger trx --results-directory $(Agent.TempDirectory)'

      - task: PublishTestResults@2
        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: '**/*.trx'
          searchFolder: $(Agent.TempDirectory)

      - task: PublishCodeCoverageResults@1
        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows
        displayName: 'Publish Code Coverage Results'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
          failIfCoverageEmpty: true

      - task: CmdLine@2
        displayName: 'Pack AsyncAwaitBestPractices NuGet'
        inputs:
          script: 'dotnet pack $(PathToAsyncAwaitBestPracticesCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion)'

      - task: CmdLine@2
        displayName: 'Pack AsyncAwaitBestPractices.MVVM NuGet'
        inputs:
          script: 'dotnet pack $(PathToAsyncAwaitBestPracticesMVVMCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion)'

      # check vulnerabilities
      - powershell: |
          dotnet list $(PathToAsyncAwaitBestPracticesCsproj) package --vulnerable --include-transitive | findstr /S /c:"has the following vulnerable packages";
          if ($LastExitCode -ne 1)
          {
            dotnet list $(PathToAsyncAwaitBestPracticesCsproj) package --vulnerable --include-transitive;
            exit 1;
          }

          exit 0;
        displayName: 'Check AsyncAwaitBestPractices Dependencies Vulnerabilities'
        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows

      - powershell: |
          dotnet list $(PathToAsyncAwaitBestPracticesMVVMCsproj) package --vulnerable --include-transitive | findstr /S /c:"has the following vulnerable packages";
          if ($LastExitCode -ne 1)
          {
            dotnet list $(PathToAsyncAwaitBestPracticesMVVMCsproj) package --vulnerable --include-transitive;
            exit 1;
          }

          exit 0;
        displayName: 'Check AsyncAwaitBestPractices.MVVM Dependencies Vulnerabilities'
        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows

      - powershell: |
          dotnet list $(PathToSampleAppCsproj) package --vulnerable --include-transitive | findstr /S /c:"has the following vulnerable packages";
          if ($LastExitCode -ne 1)
          {
            dotnet list $(PathToSampleAppCsproj) package --vulnerable --include-transitive;
            exit 1;
          }

          exit 0;
        displayName: 'Check Sample App Dependencies Vulnerabilities'
        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows
      
      # Copy all NuGet packages
      - task: PowerShell@2
        condition: and(eq(variables['Agent.OS'], 'Windows_NT'), not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))) # Only run this step on Windows and when it's not a Release build
        displayName: 'Copy NuGet Packages to Staging Directory'
        inputs:
          targetType: 'inline'
          script: |
            $source = ".\src"
            $filter = "nupkg"
            Get-ChildItem -Path $source -Recurse | Where-Object { $_.Extension -match $filter } | Copy-Item -Destination "$(Build.ArtifactStagingDirectory)"
          pwsh: true

      - task: CopyFiles@2
        displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
        inputs:
          SourceFolder: '$(system.defaultworkingdirectory)'
          Contents: '**\bin\$(BuildConfiguration)\**'
          TargetFolder: '$(build.artifactstagingdirectory)'

      # Publish build artifacts
      - task: PublishBuildArtifacts@1
        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows
        displayName: 'Publish NuGet Packages'
        inputs:
          artifactName: nuget
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
