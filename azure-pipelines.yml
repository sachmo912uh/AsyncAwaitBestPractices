variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: true

trigger:
  branches:
    include:
    - main
  tags:
    include:
    - '*'

pr:
  autoCancel: 'true'
  branches:
    include:
    - main

jobs:     
  - job: build_macos
    displayName: Build macOS Library
    pool:
      vmImage: macos-latest

    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK 2.1.x'
      inputs:
        version: ' 2.1.x'
        includePreviewVersions: true
        installationPath: '$(Agent.ToolsDirectory)'
        performMultiLevelLookup: true

    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK 3.1.x'
      inputs:
        version: ' 3.1.x'
        installationPath: '$(Agent.ToolsDirectory)'
        performMultiLevelLookup: true

    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK  5.0.x'
      inputs:
        version: ' 5.0.x'
        installationPath: '$(Agent.ToolsDirectory)'
        performMultiLevelLookup: true

    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK  6.0.x'
      inputs:
        version: ' 6.0.x'
        installationPath: '$(Agent.ToolsDirectory)'
        performMultiLevelLookup: true

    - task: CmdLine@2
      displayName: 'Install Boots'
      inputs:
        script: |
          dotnet tool install --global boots
          boots --stable Mono
          boots --preview Xamarin.Android
          boots --preview Xamarin.iOS
          boots --preview Xamarin.Mac

    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet'
      inputs:
        checkLatest: true

    - task: CmdLine@2
      displayName: 'Restore NuGet Packages'
      inputs:
        script: 'dotnet restore **/*.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: test
        projects: '$(Build.SourcesDirectory)/Src/AsyncAwaitBestPractices.UnitTests'

    - task: CmdLine@2
      displayName: 'Build Xamarin.Android project'
      inputs:
        script: 'msbuild ./Src/HackerNews.Droid/HackerNews.Droid.csproj /verbosity:normal /p:Configuration=Release /t:Restore'

    - task: Bash@3
      displayName: 'Submit APK to App Center Test'
      inputs:
        targetType: filePath
        filePath: './SubmitApkToAppCenterTest.sh'
        arguments: '$(AppCenterApiToken)'
        failOnStderr: true
      env:
        BuildPath: $(Build.Repository.LocalPath)
        NuGetPackagesPath: $(UserProfile)\.nuget\packages

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '**\bin\$(BuildConfiguration)\**'
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'

